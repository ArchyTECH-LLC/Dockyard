// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace ApiSdk.Models
{
    #pragma warning disable CS1591
    public class JobDetail : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The description property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The group property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Group { get; set; }
#nullable restore
#else
        public string Group { get; set; }
#endif
        /// <summary>The isDurable property</summary>
        public bool? IsDurable { get; set; }
        /// <summary>The isNonConcurrent property</summary>
        public bool? IsNonConcurrent { get; set; }
        /// <summary>The isUpdateData property</summary>
        public bool? IsUpdateData { get; set; }
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The requestRecovery property</summary>
        public bool? RequestRecovery { get; set; }
        /// <summary>The scheduler property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Scheduler { get; set; }
#nullable restore
#else
        public string Scheduler { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="ApiSdk.Models.JobDetail"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ApiSdk.Models.JobDetail CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ApiSdk.Models.JobDetail();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "description", n => { Description = n.GetStringValue(); } },
                { "group", n => { Group = n.GetStringValue(); } },
                { "isDurable", n => { IsDurable = n.GetBoolValue(); } },
                { "isNonConcurrent", n => { IsNonConcurrent = n.GetBoolValue(); } },
                { "isUpdateData", n => { IsUpdateData = n.GetBoolValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "requestRecovery", n => { RequestRecovery = n.GetBoolValue(); } },
                { "scheduler", n => { Scheduler = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("group", Group);
            writer.WriteBoolValue("isDurable", IsDurable);
            writer.WriteBoolValue("isNonConcurrent", IsNonConcurrent);
            writer.WriteBoolValue("isUpdateData", IsUpdateData);
            writer.WriteStringValue("name", Name);
            writer.WriteBoolValue("requestRecovery", RequestRecovery);
            writer.WriteStringValue("scheduler", Scheduler);
        }
    }
}
