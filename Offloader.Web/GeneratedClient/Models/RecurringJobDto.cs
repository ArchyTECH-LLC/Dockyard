// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace ApiSdk.Models
{
    #pragma warning disable CS1591
    public class RecurringJobDto : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The createdAt property</summary>
        public DateTimeOffset? CreatedAt { get; set; }
        /// <summary>The cron property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Cron { get; set; }
#nullable restore
#else
        public string Cron { get; set; }
#endif
        /// <summary>The error property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Error { get; set; }
#nullable restore
#else
        public string Error { get; set; }
#endif
        /// <summary>The id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The job property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ApiSdk.Models.Job? Job { get; set; }
#nullable restore
#else
        public ApiSdk.Models.Job Job { get; set; }
#endif
        /// <summary>The lastExecution property</summary>
        public DateTimeOffset? LastExecution { get; set; }
        /// <summary>The lastJobId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LastJobId { get; set; }
#nullable restore
#else
        public string LastJobId { get; set; }
#endif
        /// <summary>The lastJobState property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LastJobState { get; set; }
#nullable restore
#else
        public string LastJobState { get; set; }
#endif
        /// <summary>The loadException property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ApiSdk.Models.JobLoadException? LoadException { get; set; }
#nullable restore
#else
        public ApiSdk.Models.JobLoadException LoadException { get; set; }
#endif
        /// <summary>The nextExecution property</summary>
        public DateTimeOffset? NextExecution { get; set; }
        /// <summary>The queue property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Queue { get; set; }
#nullable restore
#else
        public string Queue { get; set; }
#endif
        /// <summary>The removed property</summary>
        public bool? Removed { get; set; }
        /// <summary>The retryAttempt property</summary>
        public int? RetryAttempt { get; set; }
        /// <summary>The timeZoneId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TimeZoneId { get; set; }
#nullable restore
#else
        public string TimeZoneId { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="ApiSdk.Models.RecurringJobDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ApiSdk.Models.RecurringJobDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ApiSdk.Models.RecurringJobDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "createdAt", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "cron", n => { Cron = n.GetStringValue(); } },
                { "error", n => { Error = n.GetStringValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "job", n => { Job = n.GetObjectValue<ApiSdk.Models.Job>(ApiSdk.Models.Job.CreateFromDiscriminatorValue); } },
                { "lastExecution", n => { LastExecution = n.GetDateTimeOffsetValue(); } },
                { "lastJobId", n => { LastJobId = n.GetStringValue(); } },
                { "lastJobState", n => { LastJobState = n.GetStringValue(); } },
                { "loadException", n => { LoadException = n.GetObjectValue<ApiSdk.Models.JobLoadException>(ApiSdk.Models.JobLoadException.CreateFromDiscriminatorValue); } },
                { "nextExecution", n => { NextExecution = n.GetDateTimeOffsetValue(); } },
                { "queue", n => { Queue = n.GetStringValue(); } },
                { "removed", n => { Removed = n.GetBoolValue(); } },
                { "retryAttempt", n => { RetryAttempt = n.GetIntValue(); } },
                { "timeZoneId", n => { TimeZoneId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDateTimeOffsetValue("createdAt", CreatedAt);
            writer.WriteStringValue("cron", Cron);
            writer.WriteStringValue("error", Error);
            writer.WriteStringValue("id", Id);
            writer.WriteObjectValue<ApiSdk.Models.Job>("job", Job);
            writer.WriteDateTimeOffsetValue("lastExecution", LastExecution);
            writer.WriteStringValue("lastJobId", LastJobId);
            writer.WriteStringValue("lastJobState", LastJobState);
            writer.WriteObjectValue<ApiSdk.Models.JobLoadException>("loadException", LoadException);
            writer.WriteDateTimeOffsetValue("nextExecution", NextExecution);
            writer.WriteStringValue("queue", Queue);
            writer.WriteBoolValue("removed", Removed);
            writer.WriteIntValue("retryAttempt", RetryAttempt);
            writer.WriteStringValue("timeZoneId", TimeZoneId);
        }
    }
}
